name: Deno CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  DENO_DIR: .deno_cache

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.canary }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        deno-version: [v2.x]
        canary: [false]
        include:
          - deno-version: canary
            os: ubuntu-latest
            canary: true

    steps:
      - name: Configure Git for Windows
        if: matrix.os == 'windows-latest'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Check formatting
        run: deno fmt --check

      - name: Lint code
        run: deno lint

      - name: Run tests
        run: deno test --allow-all --coverage=cov/

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.deno-version == 'v2.x'
        run: deno coverage --lcov cov/ > cov.lcov

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.deno-version == 'v2.x'
        uses: codecov/codecov-action@v3
        with:
          file: cov.lcov
          fail_ci_if_error: false
